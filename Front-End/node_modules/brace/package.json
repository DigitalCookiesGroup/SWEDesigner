{
  "_args": [
    [
      {
        "raw": "brace@^0.9.0",
        "scope": null,
        "escapedName": "brace",
        "name": "brace",
        "rawSpec": "^0.9.0",
        "spec": ">=0.9.0 <0.10.0",
        "type": "range"
      },
      "/home/savefolla/SWEDesigner/SWEDesigner-app/node_modules/ng2-ace-editor"
    ]
  ],
  "_from": "brace@>=0.9.0 <0.10.0",
  "_id": "brace@0.9.1",
  "_inCache": true,
  "_location": "/brace",
  "_nodeVersion": "6.9.2-pre",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/brace-0.9.1.tgz_1481815549893_0.49154204363003373"
  },
  "_npmUser": {
    "name": "thlorenz",
    "email": "thlorenz@gmx.de"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "brace@^0.9.0",
    "scope": null,
    "escapedName": "brace",
    "name": "brace",
    "rawSpec": "^0.9.0",
    "spec": ">=0.9.0 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ng2-ace-editor"
  ],
  "_resolved": "https://registry.npmjs.org/brace/-/brace-0.9.1.tgz",
  "_shasum": "19dcbae2faec9a9920a0452ec64d8d84df45e7b6",
  "_shrinkwrap": null,
  "_spec": "brace@^0.9.0",
  "_where": "/home/savefolla/SWEDesigner/SWEDesigner-app/node_modules/ng2-ace-editor",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "bugs": {
    "url": "https://github.com/thlorenz/brace/issues"
  },
  "dependencies": {
    "w3c-blob": "0.0.1"
  },
  "description": "browserify compatible version of the ace editor.",
  "devDependencies": {
    "browserify": "~4.2.0",
    "opener": "~1.3.0",
    "shelljs": "~0.2.6",
    "tape": "~4.0.0",
    "uglify-js": "~2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "19dcbae2faec9a9920a0452ec64d8d84df45e7b6",
    "tarball": "https://registry.npmjs.org/brace/-/brace-0.9.1.tgz"
  },
  "engine": {
    "node": ">=0.6"
  },
  "gitHead": "81ae26a1a94999898faf9a531e0ac2b6d3aaf43d",
  "homepage": "https://github.com/thlorenz/brace",
  "keywords": [
    "ace",
    "editor",
    "browser",
    "package",
    "bundle",
    "inline",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    }
  ],
  "name": "brace",
  "optionalDependencies": {},
  "readme": "# brace\n\n[browserify](https://github.com/substack/node-browserify) compatible version of the [ace editor](http://ajaxorg.github.io/ace/).\n\n[![browser support](https://ci.testling.com/thlorenz/brace.png)](https://ci.testling.com/thlorenz/brace)\n\n***This badge shows which browsers support annotations, however the editor itself works in pretty much every browser.***\n\n[![screenshot](assets/brace.png)](http://thlorenz.github.io/brace/)\n*[Try it in your browser](http://thlorenz.github.io/brace/)*\n\n## Installation\n\n    npm install brace\n\n## Example\n\n```js\nvar ace = require('brace');\nrequire('brace/mode/javascript');\nrequire('brace/theme/monokai');\n\nvar editor = ace.edit('javascript-editor');\neditor.getSession().setMode('ace/mode/javascript');\neditor.setTheme('ace/theme/monokai');\n```\n\nInclude the above as an **entry** in your browserify build, add a `<div id=\"javascript-editor\"></div>` to your html page and\na JavaScript editor will appear.\n\nThis editor will show error/warning annotations if your browser supports WebWorkers\ncreated via a blob URL (see testling support badge on top).\n\nPlease consult the [detailed example](https://github.com/thlorenz/brace/tree/master/example) for more information.\n\n## Why not just use ace?\n\nThe ace editor creates the [WebWorker](http://www.html5rocks.com/en/tutorials/workers/basics/) via a worker script url.\nThis requires the worker scripts to reside on your server and forces you to host the ace editor on your server as well.\n\nWhile that is ok in most cases, it prevents you from providing a fully working ace editor package.\n\nWith brace, you have two options:\n\n- include brace itself when browserifying your app to get a fully working ace editor included with your bundle (no other\n  external scripts needed)\n- create the bundle as explained above and provide it to others so they can include it in their html page simply via a\n  script tag\n\n## What if my browser doesn't support it?\n\nIf brace is unable to inline the web worker, it just falls back to provide the ace editor without annotation support.\nThis means the editor is fully functional, but doesn't display errors/warnings on the left side.\n\nAs far as I understand, the original ace editor behaves in exactly the same way.\n\n## How does it work?\n\nbrace has an [update script](https://github.com/thlorenz/brace/blob/master/build/update.js) which automatically pulls\ndown the [ace builds](https://github.com/ajaxorg/ace-builds) and refactors them to provide the following:\n\n- inline all supported workers\n- automatically require the workers that a 'mode' (language) depends on inside the mode file itself\n- provide the modes and themes at the same paths that ace's `setMode` and `setTheme` use (just replace 'ace' with\n  'brace') as seen in the above example\n\n## Supported Workers\n\nAll workers included with ace are supported, except `php` and `xquery`, mainly because I wasn't able to properly\nstringify their code (any help with that is appreciated).\n\n## Can I use it with TypeScript?\n\nYes, brace includes modular type definitions so you can do normal import statements and type safety checking\nwith TypeScript. The example above becomes:\n\n```ts\nimport * as ace from 'brace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/monokai';\n\nconst editor = ace.edit('javascript-editor');\neditor.getSession().setMode('ace/mode/javascript');\neditor.setTheme('ace/theme/monokai');\n```\n\nbrace exposes these type definitions in `package.json`, so they are available when you do `npm install brace`.\nYou do not need an additional install step or another tool to install these definitions.\n\nThese type definitions are kept up to date in the same way as the rest of brace. There is an\n[update script](https://github.com/thlorenz/brace/blob/master/build/update-ts.js) which automatically pulls\ndown the [DefinitelyTyped definition](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/ace/ace.d.ts)\nand refactors it to be modular rather than global.\n\n## Test\n\n    npm explore brace\n    npm test\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/brace.git"
  },
  "scripts": {
    "test": "browserify test/*.js > test/bundle.js --debug && opener test/index.html",
    "update": "(cd build && node ./update && node ./update-ts)"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/21..latest",
      "firefox/nightly",
      "chrome/26..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "typings": "index.d.ts",
  "version": "0.9.1"
}
