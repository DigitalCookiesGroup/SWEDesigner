{"version":3,"file":"ui-router-ng2.min.js","sources":["../src/statebuilders/views.ts","../src/uiRouterConfig.ts","../src/directives/uiSrefStatus.ts","../src/uiRouterNgModule.ts","../src/lazyLoad/lazyLoadNgModule.ts","../src/statebuilders/lazyLoad.ts","../src/providers.ts","../src/private_import_core.ts","../src/mergeInjector.ts","../src/directives/uiView.ts","../src/directives/uiSref.ts","../src/directives/uiSrefActive.ts","../src/directives/directives.ts","../modules/@angular/router/src/router_config_loader.ts","../modules/@angular/router/src/shared.ts","../node_modules/@uirouter/rx/src/ui-router-rx.ts","../src/location/locationService.ts","../src/location/locationConfig.ts"],"sourcesContent":["/** @module ng2 */ /** */\nimport {StateObject} from \"@uirouter/core\";\nimport {PathNode} from \"@uirouter/core\";\nimport {pick, forEach} from \"@uirouter/core\";\nimport {ViewConfig} from \"@uirouter/core\";\nimport {Ng2ViewDeclaration} from \"../interface\";\nimport {services} from \"@uirouter/core\";\nimport {ViewService} from \"@uirouter/core\";\n\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angular.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  let views: { [key: string]: Ng2ViewDeclaration } = {},\n      viewsObject = state.views || {\"$default\": pick(state, [\"component\", \"bindings\"])};\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) { }\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n","/** @module ng2 */ /** */\nimport { UIRouter, isFunction, StateObject } from \"@uirouter/core\";\nimport {StatesModule, RootModule} from \"./uiRouterNgModule\";\nimport {Injector} from \"@angular/core\";\nimport {isDefined} from \"@uirouter/core\";\n\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  let states = module.states || [];\n  return states.map(state => uiRouter.stateRegistry.register(state));\n}\n\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise)      && uiRouter.urlService.rules.otherwise(module.otherwise);\n}\n\n\n","/** @ng2api @module directives */\n/** */\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils\n} from '@uirouter/core';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport {of} from 'rxjs/observable/of';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {switchMap} from 'rxjs/operator/switchMap';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\nimport {map} from 'rxjs/operator/map';\nimport {concat} from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n}\n\n/** @internalapi */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: StateObject = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathUtils.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    let paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  let isStartEvent = event.evt === 'start';\n  let isSuccessEvent = event.evt === 'success';\n  let activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n  } as SrefStatus;\n}\n\n/** @internalapi */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus) {\n  return {\n    active:   left.active   || right.active,\n    exact:    left.exact    || right.exact,\n    entering: left.entering || right.entering,\n    exiting:  left.exiting  || right.exiting,\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n@Directive({ selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]' })\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n  @Output(\"uiSrefStatus\") uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n  @ContentChildren(UISref, {descendants: true}) srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internalapi */ private _subscription: Subscription;\n  /** @internalapi */ private _srefChangesSub: Subscription;\n  /** @internalapi */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internalapi */ private _globals: UIRouterGlobals;\n  constructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let transEvents$: Observable<TransEvt> = switchMap.call(this._globals.start$, (trans: Transition) => {\n      const event = (evt: string) => ({evt, trans} as TransEvt);\n\n      let transStart$ = of(event(\"start\"));\n      let transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this.srefs.toArray());\n    this._srefChangesSub = this.srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    let targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = mergeMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        let statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\n}\n","/** @ng2api @module core */\n/** */\nimport { Ng2StateDeclaration } from \"./interface\";\nimport {\n  NgModule, OpaqueToken, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Provider, Injector\n} from \"@angular/core\";\nimport { CommonModule, LocationStrategy, HashLocationStrategy, PathLocationStrategy } from \"@angular/common\";\nimport { _UIROUTER_DIRECTIVES } from \"./directives/directives\";\nimport { UIView } from \"./directives/uiView\";\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter } from \"@uirouter/core\";\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from \"./providers\";\n\nimport { ROUTES } from \"@angular/router/src/router_config_loader\";\n/** @hidden */ export const UIROUTER_ROOT_MODULE  = new OpaqueToken(\"UIRouter Root Module\");\n/** @hidden */ export const UIROUTER_MODULE_TOKEN = new OpaqueToken(\"UIRouter Module\");\n/** @hidden */ export const UIROUTER_STATES       = new OpaqueToken(\"UIRouter States\");\n// /** @hidden */ export const ROUTES = UIROUTER_STATES;\n\nexport function makeRootProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_ROOT_MODULE,         useValue: module,              multi: true},\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\n\nexport function makeChildProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\n\nexport function locationStrategy(useHash) {\n    return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n})\nexport class UIRouterModule {\n  /**\n   * Creates a UI-Router Module for the root (bootstrapped) application module to import\n   *\n   * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n   * An application should only create and import a single `NgModule` using `forRoot()`.\n   * All other modules should be created using [[UIRouterModule.forChild]].\n   *\n   * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n   * This factory also accepts root-level router configuration.\n   * These are the only differences between `forRoot` and `forChild`.\n   *\n   * Example:\n   * ```js\n   * let routerConfig = {\n   *   otherwise: '/home',\n   *   states: [homeState, aboutState]\n   * };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     BrowserModule,\n   *     UIRouterModule.forRoot(routerConfig),\n   *     FeatureModule1\n   *   ]\n   * })\n   * class MyRootAppModule {}\n   *\n   * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n   * ```\n   *\n   * @param config declarative UI-Router configuration\n   * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n   */\n  static forRoot(config: RootModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ]\n    };\n  }\n\n  /**\n   * Creates an `NgModule` for a UIRouter module\n   *\n   * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * #### Example:\n   * ```js\n   * var homeState = { name: 'home', url: '/home', component: Home };\n   * var aboutState = { name: 'about', url: '/about', component: About };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n   *     SharedModule,\n   *   ],\n   *   declarations: [ Home, About ],\n   * })\n   * export class AppModule {};\n   * ```\n   *\n   * @param module UI-Router module options\n   * @returns an `NgModule`\n   */\n  static forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n\n}\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Sets [[UrlRouterProvider.otherwise]].\n   */\n  otherwise?: (string | UrlRuleHandlerFn | TargetState | TargetStateDef);\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n\n","/** @ng2api @module core */\n/** */\nimport { NgModuleRef, Injector, NgModuleFactory, Type, Compiler, NgModuleFactoryLoader } from \"@angular/core\";\nimport {\n  Transition, LazyLoadResult, UIRouter, Resolvable, NATIVE_INJECTOR_TOKEN, isString, unnestR, inArray, StateObject,\n  uniqR\n} from \"@uirouter/core\";\nimport { RootModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, StatesModule } from \"../uiRouterNgModule\";\nimport { applyModuleConfig } from \"../uiRouterConfig\";\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return System.import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n/**\n * A string or a function which lazy loads a module\n *\n * If a string, should conform to the Angular Router `loadChildren` string.\n * #### Example:\n * ```\n * var ngModuleToLoad = './foo/foo.module#FooModule'\n * ```\n *\n * For functions, see: [[ModuleTypeCallback]]\n */\nexport type NgModuleToLoad = string | ModuleTypeCallback;\n\n/**\n * Returns a function which lazy loads a nested module\n *\n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n *\n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n *\n * #### Example:\n * Using `System.import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => System.import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n *\n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n *\n *\n * @param moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n *\n * @returns A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(moduleToLoad: NgModuleToLoad): (transition: Transition) => Promise<LazyLoadResult> {\n  return (transition: Transition) => {\n    const ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const createModule = (factory: NgModuleFactory<any>) =>\n        factory.create(ng2Injector);\n\n    const applyModule = (moduleRef: NgModuleRef<any>) =>\n        applyNgModule(transition, moduleRef);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector)\n        .then(createModule)\n        .then(applyModule);\n  };\n}\n\n/**\n * Returns the module factory that can be used to instantiate a module\n *\n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n *\n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n *\n * @internalapi\n */\nexport function loadModuleFactory(moduleToLoad: NgModuleToLoad, ng2Injector: Injector): Promise<NgModuleFactory<any>> {\n  if (isString(moduleToLoad)) {\n    return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n  }\n\n  const compiler: Compiler = ng2Injector.get(Compiler);\n  const offlineMode = compiler instanceof Compiler;\n\n  const unwrapEsModuleDefault = x =>\n      x && x.__esModule && x['default'] ? x['default'] : x;\n  const compileAsync = (moduleType: Type<any>) =>\n      compiler.compileModuleAsync(moduleType);\n\n  const loadChildrenPromise = Promise.resolve(moduleToLoad()).then(unwrapEsModuleDefault);\n  return offlineMode ? loadChildrenPromise : loadChildrenPromise.then(compileAsync);\n}\n\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n *\n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n *\n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n *\n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n *\n * @internalapi\n */\nexport function applyNgModule(transition: Transition, ng2Module: NgModuleRef<any>): LazyLoadResult {\n  let injector = ng2Module.injector;\n  let parentInjector = <Injector> ng2Module.injector['parent'];\n  let uiRouter: UIRouter = injector.get(UIRouter);\n  let registry = uiRouter.stateRegistry;\n\n  let originalName = transition.to().name;\n  let originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  let isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  let replacementName = isFuture && isFuture[1];\n\n  let newRootModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE)\n      .reduce(uniqR, []) as RootModule[];\n  let newChildModules= multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN)\n      .reduce(uniqR, []) as StatesModule[];\n\n  if (newRootModules.length) {\n    console.log(newRootModules);\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  let newStateObjects: StateObject[] = newChildModules\n      .map(module => applyModuleConfig(uiRouter, injector, module))\n      .reduce(unnestR, [])\n      .reduce(uniqR, []);\n\n  let replacementState = registry.get(replacementName);\n  if (!replacementState || replacementState === originalState) {\n    throw new Error(`The Future State named '${originalName}' lazy loaded an NgModule. ` +\n        `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n        `which replaces the (placeholder) '${originalName}' Future State. ` +\n        `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n        `using UIRouterModule.forChild({ states: CHILD_STATES }).`);\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  let newParentStates = newStateObjects.filter(state => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach(state => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n\n/**\n * Returns the new dependency injection values from the Child Injector\n *\n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n *\n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n *\n * @internalapi\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  let childVals: RootModule[] = child.get(token, []);\n  let parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter(val => parentVals.indexOf(val) === -1);\n}","/** @module ng2 */\n/** */\nimport { LazyLoadResult, Transition, StateDeclaration } from \"@uirouter/core\"; // has or is using\nimport { BuilderFunction, StateObject } from \"@uirouter/core\";\nimport { loadNgModule } from \"../lazyLoad/lazyLoadNgModule\";\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => System.import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library'),\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library')\n *       .then(() => loadNgModule(() => System.import('./childModule.ts'))\n * }\n * ```\n *\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  let loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n","/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/** */\nimport { Injector, Provider } from \"@angular/core\";\nimport {\n  UIRouter, PathNode, StateRegistry, StateService, TransitionService, UrlMatcherFactory, UrlRouter, ViewService,\n  UrlService, UIRouterGlobals, services, Resolvable, NATIVE_INJECTOR_TOKEN\n} from \"@uirouter/core\";\nimport { UIView, ParentUIViewInject } from \"./directives/uiView\";\nimport { ng2ViewsBuilder, Ng2ViewConfig } from \"./statebuilders/views\";\nimport { Ng2ViewDeclaration } from \"./interface\";\nimport { applyRootModuleConfig, applyModuleConfig } from \"./uiRouterConfig\";\nimport { RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN } from \"./uiRouterNgModule\";\nimport { servicesPlugin, ServicesPlugin } from \"@uirouter/core\";\nimport { ng2LazyLoadBuilder } from \"./statebuilders/lazyLoad\";\nimport { UIRouterRx } from \"@uirouter/rx\";\nimport { LocationStrategy } from \"@angular/common\";\nimport { Ng2LocationServices } from \"./location/locationService\";\nimport { Ng2LocationConfig } from \"./location/locationConfig\";\n\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n */\nexport function uiRouterFactory(locationStrategy: LocationStrategy, injector: Injector) {\n  let rootModules: RootModule[] = injector.get(UIROUTER_ROOT_MODULE);\n  let modules: StatesModule[] = injector.get(UIROUTER_MODULE_TOKEN);\n\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  let router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = new Ng2LocationServices(router, locationStrategy);\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  let viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory(\"ng2\", viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  let registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  let ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n  // Start monitoring the URL\n  if (!router.urlRouter.interceptDeferred) {\n    router.urlService.listen();\n    router.urlService.sync();\n  }\n\n  return router;\n}\n\nexport function parentUIViewInjectFactory(r: StateRegistry) { return { fqn: null, context: r.root() } as ParentUIViewInject; }\n\nexport const _UIROUTER_INSTANCE_PROVIDERS: Provider[] =  [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [LocationStrategy, Injector] },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry]},\n];\n\nexport function fnStateService(r: UIRouter) { return r.stateService; }\nexport function fnTransitionService(r: UIRouter) { return r.transitionService; }\nexport function fnUrlMatcherFactory(r: UIRouter) { return r.urlMatcherFactory; }\nexport function fnUrlRouter(r: UIRouter) { return r.urlRouter; }\nexport function fnUrlService(r: UIRouter) { return r.urlService; }\nexport function fnViewService(r: UIRouter) { return r.viewService; }\nexport function fnStateRegistry(r: UIRouter) { return r.stateRegistry; }\nexport function fnGlobals(r: any) { return r.globals; }\n\nexport const _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService,      useFactory: fnStateService,       deps: [UIRouter]},\n  { provide: TransitionService, useFactory: fnTransitionService,  deps: [UIRouter]},\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory,  deps: [UIRouter]},\n  { provide: UrlRouter,         useFactory: fnUrlRouter,          deps: [UIRouter]},\n  { provide: UrlService,        useFactory: fnUrlService,         deps: [UIRouter]},\n  { provide: ViewService,       useFactory: fnViewService,        deps: [UIRouter]},\n  { provide: StateRegistry,     useFactory: fnStateRegistry,      deps: [UIRouter]},\n  { provide: UIRouterGlobals,   useFactory: fnGlobals,            deps: [UIRouter]},\n];\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n","/** @module ng2 */\n/**\n * @Kamshak It's imported like this in @angular/compiler as well.\n * Was going to mark it injectable as in\n * https://github.com/angular/angular/blob/42a287fabf6b035d51e00cf3006c27fec00f054a/modules/%40angular/compiler/src/ng_module_resolver.ts\n * but unfortunately not all platforms (namely browser-dynamic) provide it.\n */\n\nimport { __core_private__ as r} from '@angular/core';\nexport type ReflectorReader = typeof r._ReflectorReader;\nexport var reflector: typeof r.reflector = r.reflector;\n","/** @module ng2 */ /** */\nimport {Injector} from \"@angular/core\";\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\n  private injectors: Injector[];\n  constructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error(\"pass at least two injectors\");\n    this.injectors = injectors;\n  }\n\n  /**\n   * Get the token from the first injector which contains it.\n   *\n   * Delegates to the first Injector.get().\n   * If not found, then delegates to the second Injector (and so forth).\n   * If no Injector contains the token, return the `notFoundValue`, or throw.\n   *\n   * @param token the DI token\n   * @param notFoundValue the value to return if none of the Injectors contains the token.\n   * @returns {any} the DI value\n   */\n  get(token: any, notFoundValue?: any): any {\n    for (let i = 0; i < this.injectors.length; i++) {\n      let val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}","/** @ng2api @module directives */\n/** */\nimport {\n  Component, ComponentFactoryResolver, ViewContainerRef, Input, ComponentRef, Type, ReflectiveInjector, ViewChild,\n  Injector, Inject\n} from '@angular/core';\nimport { reflector } from '../private_import_core';\nimport {\n  UIRouter, isFunction, Transition, parse, TransitionHookFn, StateDeclaration, inArray, trace, ViewContext, ViewConfig,\n  ActiveUIView, ResolveContext, NATIVE_INJECTOR_TOKEN, flattenR\n} from '@uirouter/core';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n\n/** @hidden */\nlet id = 0;\n\n/** @internalapi These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internalapi */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internalapi\n */\nconst ng2ComponentInputs = (ng2CompClass: Type<any>, component: any) => {\n  /** Get \"@Input('foo') _foo\" inputs */\n  let props = reflector.propMetadata(ng2CompClass);\n  let _props = Object.keys(props || {})\n      // -> [ { key: string, anno: annotations[] } ] tuples\n      .map(key => ({ key, annoArr: props[key] }))\n      // -> flattened to [ { key: string, anno: annotation } ] tuples\n      .reduce((acc, tuple) => acc.concat(tuple.annoArr.map(anno => ({ key: tuple.key, anno }))), [])\n      // Only Inputs\n      .filter(tuple => tuple.anno instanceof Input)\n      // If they have a bindingPropertyName, i.e. \"@Input('foo') _foo\", then foo, else _foo\n      .map(tuple => ({ token: tuple.anno.bindingPropertyName || tuple.key, prop: tuple.key }));\n\n  /** Get \"inputs: ['foo']\" inputs */\n  let inputs = reflector.annotations(ng2CompClass)\n      // Find the ComponentMetadata class annotation\n      .filter(x => x instanceof Component && !!x.inputs)\n      // Get the .inputs string array\n      .map(x => x.inputs)\n      .reduce(flattenR, [])\n      .map(input => ({ token: input, prop: input }));\n\n  return _props.concat(inputs) as InputMapping[];\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n@Component({\n  selector: 'ui-view, [ui-view]',\n  template: `\n    <template #componentTarget></template>\n    <ng-content *ngIf=\"!componentRef\"></ng-content>\n  `\n  // styles: [`\n  //   .done-true {\n  //     text-decoration: line-through;\n  //     color: grey;\n  //   }`\n  // ],\n  // template: `\n  // <div style=\"padding: 1em; border: 1px solid lightgrey;\">\n  //\n  //   <div #content style=\"color: lightgrey; font-size: smaller;\">\n  //     <div>ui-view #{{uiViewData?.id}} created by '{{ parentContext?.name || \"(root)\" }}' state</div>\n  //     <div>name: (absolute) '{{uiViewData?.fqn}}' (contextual) '{{uiViewData?.name}}@{{parentContext?.name}}' </div>\n  //     <div>currently filled by: '{{(uiViewData?.config && uiViewData?.config?.viewDecl?.$context) || 'empty...'}}'</div>\n  //   </div>\n  //\n  // </div>`\n})\nexport class UIView {\n  @ViewChild('componentTarget', {read: ViewContainerRef}) componentTarget: ViewContainerRef;\n  @Input('name') name: string;\n  @Input('ui-view') set _name(val: string) { this.name = val; }\n  /** The reference to the component currently inside the viewport */\n  componentRef: ComponentRef<any>;\n  /** Deregisters the ui-view from the view service */\n  deregisterUIView: Function;\n  /** Deregisters the master uiCanExit transition hook */\n  deregisterHook: Function;\n  /** Data about the this UIView */\n  uiViewData: ActiveUIView = <any> {};\n  parent: ParentUIViewInject;\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n\n  constructor(\n      public router: UIRouter,\n      @Inject(UIView.PARENT_INJECT) parent,\n      public viewContainerRef: ViewContainerRef\n  ) {\n    this.parent = parent;\n  }\n\n  ngOnInit() {\n    const router = this.router;\n    const parentFqn = this.parent.fqn;\n    const name = this.name || '$default';\n\n    this.uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this.parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined\n    };\n\n    this.deregisterHook = router.transitionService.onBefore({}, trans => this.applyUiCanExitHook(trans));\n    this.deregisterUIView = router.viewService.registerUIView(this.uiViewData);\n  }\n\n  /**\n   * For each transition, checks the component loaded in the ui-view for:\n   *\n   * - has a uiCanExit() component hook\n   * - is being exited\n   *\n   * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n   */\n  applyUiCanExitHook(trans: Transition) {\n    const instance = this.componentRef && this.componentRef.instance;\n    const uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const state: StateDeclaration = parse(\"uiViewData.config.viewDecl.$context.self\")(this);\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function(trans) {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n\n  disposeLast() {\n    if (this.componentRef) this.componentRef.destroy();\n    this.componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this.deregisterUIView) this.deregisterUIView();\n    if (this.deregisterHook) this.deregisterHook();\n    this.disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this.disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this.uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this.disposeLast();\n    trace.traceUIViewConfigUpdated(this.uiViewData, config && config.viewDecl.$context);\n\n    this.applyUpdatedConfig(config);\n  }\n\n  applyUpdatedConfig(config: Ng2ViewConfig) {\n    this.uiViewData.config = config;\n    // Create the Injector for the routed component\n    let context = new ResolveContext(config.path);\n    let componentInjector = this.getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let componentClass = config.viewDecl.component;\n\n    // Create the component\n    let compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    let compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this.componentRef = this.componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this.applyInputBindings(this.componentRef, context, componentClass);\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    let resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let newProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n\n    var parentInject = { context: this.uiViewData.config.viewDecl.$context, fqn: this.uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    let parentComponentInjector = this.viewContainerRef.injector;\n    let moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    let mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  applyInputBindings(ref: ComponentRef<any>, context: ResolveContext, componentClass) {\n    const component = ref.instance;\n    const bindings = this.uiViewData.config.viewDecl['bindings'] || {};\n    const explicitBoundProps = Object.keys(bindings);\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const explicitInputTuples = explicitBoundProps\n        .reduce((acc, key) => acc.concat([{ prop: key, token: bindings[key] }]), []);\n\n    const implicitInputTuples = ng2ComponentInputs(componentClass, component)\n        .filter(tuple => !inArray(explicitBoundProps, tuple.prop));\n\n    const addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    explicitInputTuples.concat(implicitInputTuples)\n        .map(addResolvable)\n        .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n        .forEach(tuple => { component[tuple.prop] = tuple.resolvable.data });\n\n    // Initiate change detection for the newly created component\n    ref.changeDetectorRef.detectChanges();\n  }\n}\n","/** @ng2api @module directives */\n/** */\nimport { UIRouter, UIRouterGlobals, extend, Obj, TransitionOptions, TargetState } from \"@uirouter/core\";\nimport { Directive, Inject, Input, Optional, ElementRef, Renderer } from \"@angular/core\";\nimport { UIView, ParentUIViewInject } from \"./uiView\";\nimport { ReplaySubject } from \"rxjs/ReplaySubject\";\nimport { Subscription } from \"rxjs/Subscription\";\n\n/**\n * @internalapi\n * # blah blah blah\n */\n@Directive({ selector: 'a[uiSref]' })\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer) { }\n  update(href: string) {\n    if (href && href != '') {\n      this._renderer.setElementProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._el.nativeElement.removeAttribute('href');\n    }\n  }\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n@Directive({\n  selector: '[uiSref]',\n  host: { '(click)': 'go()' }\n})\nexport class UISref {\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n  @Input('uiSref') state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiParams') params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n  @Input('uiOptions') options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internalapi */ private _emit: boolean = false;\n  /** @internalapi */ private _statesSub: Subscription;\n  /** @internalapi */ private _router: UIRouter;\n  /** @internalapi */ private _anchorUISref: AnchorUISref;\n  /** @internalapi */ public parent: ParentUIViewInject;\n\n  constructor(\n      _router: UIRouter,\n      @Optional() _anchorUISref: AnchorUISref,\n      @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this.parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internalapi */\n  set \"uiSref\"(val: string) { this.state = val; this.update(); }\n  /** @internalapi */\n  set \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n  /** @internalapi */\n  set \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  update() {\n    let $state = this._router.stateService;\n    if (this._emit) {\n      let newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    let defaultOpts: TransitionOptions = {\n      relative: this.parent && this.parent.context && this.parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  go() {\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\n}\n","/** @ng2api @module directives */ /** */\nimport {Directive, Input, ElementRef, Host, Renderer} from \"@angular/core\";\nimport {UISrefStatus, SrefStatus} from \"./uiSrefStatus\";\nimport {Subscription} from \"rxjs/Subscription\";\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\n@Directive({\n  selector: '[uiSrefActive],[uiSrefActiveEq]'\n})\nexport class UISrefActive {\n\n  private _classes: string[] = [];\n  @Input('uiSrefActive') set active(val: string) { this._classes = val.split(\"\\s+\")};\n\n  private _classesEq: string[] = [];\n  @Input('uiSrefActiveEq') set activeEq(val: string) { this._classesEq = val.split(\"\\s+\")};\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer, @Host() host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n","/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\nimport {UISref, AnchorUISref} from \"./uiSref\";\nimport {UISrefActive} from \"./uiSrefActive\";\nimport {UIView} from \"./uiView\";\nimport {UISrefStatus} from \"./uiSrefStatus\";\n\nexport * from \"./uiView\";\nexport * from \"./uiSref\";\nexport * from \"./uiSrefStatus\";\nexport * from \"./uiSrefActive\";\n\n/** @internalapi */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * @internalapi\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, ComponentFactoryResolver, Injector, NgModuleFactory, NgModuleFactoryLoader, OpaqueToken} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {of } from 'rxjs/observable/of';\nimport {map} from 'rxjs/operator/map';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\n\nimport {LoadChildren, Route} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n\n/**\n * @experimental\n */\nexport const /** @type {?} */ ROUTES = new OpaqueToken('ROUTES');\nexport class LoadedRouterConfig {\n/**\n * @param {?} routes\n * @param {?} injector\n * @param {?} factoryResolver\n * @param {?} injectorFactory\n */\nconstructor(\npublic routes: Route[],\npublic injector: Injector,\npublic factoryResolver: ComponentFactoryResolver,\npublic injectorFactory: Function) {}\n}\n\nfunction LoadedRouterConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nLoadedRouterConfig.prototype.routes;\n/** @type {?} */\nLoadedRouterConfig.prototype.injector;\n/** @type {?} */\nLoadedRouterConfig.prototype.factoryResolver;\n/** @type {?} */\nLoadedRouterConfig.prototype.injectorFactory;\n}\n\nexport class RouterConfigLoader {\n/**\n * @param {?} loader\n * @param {?} compiler\n */\nconstructor(private loader: NgModuleFactoryLoader,\nprivate compiler: Compiler) {}\n/**\n * @param {?} parentInjector\n * @param {?} loadChildren\n * @return {?}\n */\nload(parentInjector: Injector, loadChildren: LoadChildren): Observable<LoadedRouterConfig> {\n    return map.call(this.loadModuleFactory(loadChildren), (r: NgModuleFactory<any>) => {\n      const /** @type {?} */ ref = r.create(parentInjector);\n      const /** @type {?} */ injectorFactory = (parent: Injector) => r.create(parent).injector;\n      return new LoadedRouterConfig(\n          flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver,\n          injectorFactory);\n    });\n  }\n/**\n * @param {?} loadChildren\n * @return {?}\n */\nprivate loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return fromPromise(this.loader.load(loadChildren));\n    } else {\n      return mergeMap.call(wrapIntoObservable(loadChildren()), (t: NgModuleFactory<any>| any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return fromPromise(this.compiler.compileModuleAsync(t));\n        }\n      });\n    }\n  }\n}\n\nfunction RouterConfigLoader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterConfigLoader.prototype.loader;\n/** @type {?} */\nRouterConfigLoader.prototype.compiler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * @whatItDoes Name of the primary outlet.\n *\n * @stable\n */\nexport const /** @type {?} */ PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of parameters.\n *\n * @stable\n */\nexport type Params = {\n  [key: string]: any\n};\nexport class NavigationCancelingError extends Error {\npublic stack: any;\n/**\n * @param {?} message\n */\nconstructor(public message: string) {\n    super(message);\n    this.stack = (<any>new Error(message)).stack;\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.message; }\n}\n\nfunction NavigationCancelingError_tsickle_Closure_declarations() {\n/** @type {?} */\nNavigationCancelingError.prototype.stack;\n/** @type {?} */\nNavigationCancelingError.prototype.message;\n}\n\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult {\n  const /** @type {?} */ path = route.path;\n  const /** @type {?} */ parts = path.split('/');\n  const /** @type {?} */ posParams: {[key: string]: UrlSegment} = {};\n  const /** @type {?} */ consumed: UrlSegment[] = [];\n\n  let /** @type {?} */ currentIndex = 0;\n\n  for (let /** @type {?} */ i = 0; i < parts.length; ++i) {\n    if (currentIndex >= segments.length) return null;\n    const /** @type {?} */ current = segments[currentIndex];\n\n    const /** @type {?} */ p = parts[i];\n    const /** @type {?} */ isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) return null;\n    if (isPosParam) {\n      posParams[p.substring(1)] = current;\n    }\n    consumed.push(current);\n    currentIndex++;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || currentIndex < segments.length)) {\n    return null;\n  } else {\n    return {consumed, posParams};\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",{"errno":-2,"code":"ENOENT","syscall":"open","path":"/Users/cthielen/projects/uirouter/angular/node_modules/@uirouter/rx/src/ui-router-rx.ts"},"/** @module ng2 */\n/** */\nimport { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy) {\n    super(router, true);\n    \n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true)\n      .replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    let { path, search, hash } = parseUrl(url);\n    let urlWithHash = path + (hash ? \"#\" + hash : \"\");\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n","/** @module ng2 */\n/** */\n\nimport { UIRouter, is, BrowserLocationConfig } from \"@uirouter/core\";\nimport { LocationStrategy, PathLocationStrategy } from \"@angular/common\";\n\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy))\n  }\n\n  baseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n"],"names":["state","views","viewsObject","$default","pick","forEach","config","name","Object","keys","length","$type","$context","$name","normalized","ViewService","normalizeUIViewTarget","$uiViewName","uiViewName","$uiViewContextAnchor","uiViewContextAnchor","uiRouter","injector","module","isFunction","states","map","stateRegistry","register","isDefined","deferIntercept","urlService","otherwise","rules","basePath","appendPath","node","concat","PathUtils","subPath","n","event","srefTarget","pathMatchesTarget","pathMatches","tc","trans","treeChanges","isStartEvent","evt","isSuccessEvent","activePath","to","from","active","spreadToSubPaths","reduce","anyTrueR","exact","entering","retained","exiting","left","right","provide","UIROUTER_ROOT_MODULE","useValue","multi","UIROUTER_MODULE_TOKEN","ROUTES","ANALYZE_FOR_ENTRY_COMPONENTS","useHash","LocationStrategy","useClass","HashLocationStrategy","PathLocationStrategy","moduleToLoad","transition","ng2Injector","get","NATIVE_INJECTOR_TOKEN","createModule","factory","create","applyModule","moduleRef","applyNgModule","loadModuleFactory","then","isString","NgModuleFactoryLoader","load","compiler","Compiler","offlineMode","unwrapEsModuleDefault","x","__esModule","compileAsync","moduleType","compileModuleAsync","loadChildrenPromise","Promise","resolve","ng2Module","parentInjector","UIRouter","registry","originalName","originalState","isFuture","exec","replacementName","newRootModules","multiProviderParentChildDelta","uniqR","newChildModules","console","log","Error","newStateObjects","applyModuleConfig","unnestR","replacementState","filter","inArray","parent","resolvables","push","Resolvable","fromData","child","token","childVals","parentVals","val","indexOf","loadNgModuleFn","loadNgModule","lazyLoad","locationStrategy","rootModules","modules","router","plugin","UIRouterRx","servicesPlugin","services","$injector","bind","locationService","Ng2LocationServices","locationConfig","Ng2LocationConfig","viewConfigFactory","path","Ng2ViewConfig","viewService","_pluginapi","_viewConfigFactory","decorator","ng2ViewsBuilder","ng2LazyLoadBuilder","ng2InjectorResolvable","root","urlMatcherFactory","$get","moduleConfig","applyRootModuleConfig","urlRouter","interceptDeferred","listen","sync","r","fqn","context","stateService","transitionService","globals","reflector","id","viewDecl","this","$q","when","_i","injectors","MergeInjector","notFoundValue","i","NOT_FOUND","arguments","ng2ComponentInputs","ng2CompClass","component","props","propMetadata","_props","key","annoArr","acc","tuple","anno","Input","bindingPropertyName","prop","inputs","annotations","Component","flattenR","input","exports","viewContainerRef","UIView","parentFqn","uiViewData","creationContext","configUpdated","viewConfigUpdated","undefined","deregisterHook","onBefore","_this","applyUiCanExitHook","deregisterUIView","registerUIView","instance","componentRef","uiCanExitFn","uiCanExit","parse","onStart","call","destroy","disposeLast","trace","traceUIViewConfigUpdated","applyUpdatedConfig","ResolveContext","componentInjector","getComponentInjector","componentClass","compFactoryResolver","ComponentFactoryResolver","compFactory","resolveComponentFactory","componentTarget","createComponent","applyInputBindings","getTokens","getResolvable","resolved","newProviders","data","parentInject","UIView_1","PARENT_INJECT","parentComponentInjector","moduleInjector","mergedParentInjector","ReflectiveInjector","resolveAndCreate","ref","bindings","explicitBoundProps","explicitInputTuples","implicitInputTuples","addResolvable","resolvable","changeDetectorRef","detectChanges","__decorate","ViewChild","read","ViewContainerRef","selector","template","__param","Inject","_el","_renderer","AnchorUISref","href","setElementProperty","nativeElement","removeAttribute","Directive","ElementRef","Renderer","_router","_anchorUISref","ReplaySubject","_statesSub","states$","subscribe","update","UISref","params","options","_emit","unsubscribe","targetState$","$state","newTarget","target","getOptions","next","defaultOpts","relative","inherit","source","extend","go","host","(click)","Optional","inactiveStatus","exists","targetParamVals","targetPath","buildPath","paramSchema","param","hasOwnProperty","tailNode","tail","paramValues","Param","equals","_globals","EventEmitter","status","assign","UISrefStatus","transEvents$","switchMap","start$","transStart$","of","transResult","promise","transFinish$","fromPromise","_srefs$","BehaviorSubject","srefs","toArray","_srefChangesSub","changes","targetStates$","combineLatest","sref","_subscription","mergeMap","targets","getSrefStatus","mergeSrefStatus","_setStatus","uiSrefStatus","emit","Output","ContentChildren","descendants","QueryList","UIRouterGlobals","rnd","_classes","cls","setElementClass","_classesEq","UISrefActive","split","Host","_UIROUTER_DIRECTIVES","UIROUTER_DIRECTIVES","message","_super","stack","__extends","NavigationCancelingError","OpaqueToken","UIROUTER_STATES","UIRouterModule","ngModule","UIRouterModule_1","providers","_UIROUTER_INSTANCE_PROVIDERS","_UIROUTER_SERVICE_PROVIDERS","makeRootProviders","makeChildProviders","NgModule","imports","CommonModule","declarations","entryComponents","changeEvent","currentStates","registered","deregistered","success$","t","params$","deregisterFns","onStatesChanged","onStatesChangedEvent","deregisterFn","_locationStrategy","onPopState","type","_listener","replace","getBaseHref","title","url","_a","search","hash","urlWithHash","replaceState","pushState","dispose","BaseLocationServices","is","BrowserLocationConfig","useFactory","uiRouterFactory","deps","Injector","parentUIViewInjectFactory","StateRegistry","StateService","fnStateService","TransitionService","fnTransitionService","UrlMatcherFactory","fnUrlMatcherFactory","UrlRouter","fnUrlRouter","UrlService","fnUrlService","fnViewService","fnStateRegistry","fnGlobals","UIROUTER_PROVIDERS"],"mappings":"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"}